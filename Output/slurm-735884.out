/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:439: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if attack_method is 'fgsm':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:441: SyntaxWarning: "is" with a literal. Did you mean "=="?
  elif attack_method is 'pgd':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:451: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if attack_method is 'fgsm':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:398: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  net_c.load_state_dict(torch.load('vgg16-183-best.pth'))
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:399: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  net_f.load_state_dict(torch.load('vgg16-183-best.pth'))
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:400: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  net_d.load_state_dict(torch.load('vgg16-183-best.pth'))
==> Preparing data..
==> Preparing data..
Files already downloaded and verified
Files already downloaded and verified
CUDA ensabled.
tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149], device='cuda:0')
tensor([1175, 1746,  566,  821, 1865, 1799,  486,  295, 1626, 1762,  458, 2450,
         512, 2128, 1549, 2304, 4062, 1642,  442, 2772, 1959, 2391, 2620,  694,
        3764, 4080,  400, 2798, 2503, 1051, 1117, 3499, 3490, 2195, 1838, 2881,
        3816, 3191,  754,  315, 3253,  829, 1831, 3474,  292,  777, 2697, 2512,
        1381, 3055, 1899,  449, 1650, 2443, 1139, 3314,  268, 1905, 3146, 4002,
        1214, 2956, 2448, 2605, 2074, 2551, 3068,  351,  122, 3668, 2184,  160,
        1076,  617, 3673, 2625, 3489, 3149, 1038, 3178,  719,  710,  747, 1696,
        2317,  528,   68, 3826, 2434, 1968, 3747, 1898,  993,  942, 2472, 3127,
        1659, 4084,  792,   17, 3926, 3868, 2032, 2791, 1861,  218, 1142, 3358,
        3155, 3432,  898,  547, 1088,  899, 2546, 3649, 2224, 2818, 1201, 1313,
        4028,  429, 3124, 3766, 3637, 3571,  789,  998, 1803, 2817,  679,  286,
        1084,  322,   74, 3089,   25, 2105, 2866, 2826, 2794, 3708,  551, 1947,
        1643, 3000, 2986,    3,  608, 3301], device='cuda:0')
tensor([1391, 2371, 3280, 1107,  885, 2595,  122, 2722, 1070, 3822, 3934, 2008,
        3005,  202, 3745,  277, 1197, 2365, 3589, 2646,  607,  898, 2560, 4093,
         146, 3014, 3022, 1697, 3704, 1812, 3106, 3736, 1561,  686, 2378, 1111,
        2728,  443, 2858,   80,  731, 2817, 1602,  756, 1568, 3839, 3202, 1013,
        1477, 1356, 3367, 3533, 2292, 1977, 2461, 3689, 1719, 1146, 3528, 3212,
        2991,  318, 3306, 3973, 2672,  659, 3133, 2737, 2754, 2489,  254, 3790,
        2062, 2232, 1082,  959,  143, 3964, 3282, 3042, 1301, 1331,  389,  140,
        1092, 2917,  193, 2698, 3330, 3487, 3969, 3885, 3004, 3716, 3861, 1448,
        3015, 2713,  589, 3897,  423,  208, 3129,  505, 3010,  878, 3659, 4004,
        2708, 2306, 1469, 3111, 3201, 1168, 1908, 1936, 2357,  855, 1928, 1248,
        3538, 1347, 3611, 3505, 1832,   25, 3162,  608, 2993,  135, 2444,  515,
        3338, 2231, 1032, 1608, 3603, 1696,   91, 4033,  953, 2750,  907, 4092,
        2979, 2965, 3281, 2866, 2992, 3341], device='cuda:0')
Traceback (most recent call last):
  File "/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py", line 543, in <module>
    y=net2(x_var) ##initializaing the target value for trigger generation
      ^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py", line 363, in forward
    output = self.features(x)
             ^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py", line 69, in forward
    return F.conv2d(input, QW * step, self.bias, self.stride, self.padding, self.dilation, self.groups)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: Input type (torch.cuda.FloatTensor) and weight type (torch.FloatTensor) should be the same
