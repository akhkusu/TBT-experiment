/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:447: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if attack_method is 'fgsm':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:449: SyntaxWarning: "is" with a literal. Did you mean "=="?
  elif attack_method is 'pgd':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:459: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if attack_method is 'fgsm':
/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py:397: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load('vgg16-183-best.pth')
==> Preparing data..
==> Preparing data..
Files already downloaded and verified
Files already downloaded and verified
CUDA ensabled.
tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149], device='cuda:0')
tensor([ 694, 4028, 2317, 1073,  761, 2817, 1381, 2551, 1762, 1663, 1865, 2818,
        1175, 2233, 2826, 1968,  160,  315, 3301, 3575, 1746,  777, 4062,  719,
        2605, 1081, 1088,  479, 3253, 2887,  295, 3191, 2304, 2128, 2656,  547,
         551, 1038, 1397,  286,  900, 2450, 2881,  899, 3089, 2810, 2798,  821,
        1642,  630, 1905, 3490,  218, 2391,  528,  608,  754,  122, 1852, 3124,
        1838, 3178, 1214, 2799, 1799, 3571, 2620, 2697, 2195, 3816, 2890, 2367,
        1959, 1270, 1044, 3405, 2594, 2678, 1458, 4080, 3149, 3825, 1434, 3675,
         923, 3583, 3365, 2434, 2974,  429,  603, 3826, 3314, 3357, 2135,   17,
         853, 3432,  486, 3348, 3144, 1976, 2625, 4086, 4084, 3627,  108,  808,
          68, 3649, 2082, 3055,  195, 1549, 1427, 1861, 2577, 2374,  792, 2393,
        3747, 1696, 1052, 4036, 2448, 3315, 1230, 2868, 3517, 2651, 2032, 2956,
        4002, 3068,  449, 2971,  662, 3537, 2772, 1103,  566,   21,  339, 2960,
        1452,  906, 3868,  299, 1470,  442], device='cuda:0')
tensor([3499, 2493, 2834, 2295, 3111, 1186, 1449, 3808, 1585, 2448, 1248, 1115,
        2050, 2259, 1352, 1588, 3330, 3903, 1448, 3044, 3257, 2262, 1300, 3589,
        3180, 2216,  977, 2158, 1877,  674, 3306, 1821, 1298,  843,  899, 1823,
        2817, 3404,  156, 4069, 2422, 3990, 3848, 2232,  824, 3694, 1636, 3411,
        1893,  226, 2245, 3884, 2463, 3349, 3471, 1927, 2051,  508, 2658, 3226,
        3045, 3819, 3878, 2758, 3218, 1220, 2335,  549,  608, 1989, 1999, 3691,
        1216, 2612, 3149, 2828, 2625, 2763,  325, 3673, 2148, 1307, 3997, 3123,
        1287, 1811, 1857, 2943, 2385, 4043, 3732, 2613,  330,  930, 2285, 3262,
        1444,  765, 1074, 1026, 2177, 4067,  244, 3973,  224, 3004, 3549, 3964,
        1081, 2754, 1008, 2294,  656,   25,  756, 3939, 2107, 2126, 3701,  706,
         929, 1386, 2093, 2652, 2257, 1872, 2075, 3602, 1715, 3651, 3514,  598,
        1586, 3784, 1839,   90, 4032, 1244,   33, 1669, 2398, 1541, 2067, 3759,
        1576, 2681, 2994,  468,  525, 3542], device='cuda:0')
Traceback (most recent call last):
  File "/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py", line 551, in <module>
    y=net2(x_var) ##initializaing the target value for trigger generation
      ^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/TBT-practice/TBT_for_VGG.py", line 356, in forward
    output = self.features(x)
             ^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
           ^^^^^^^^^^^^^
  File "/gpfs/mariana/home/akkusu/311env/lib64/python3.11/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
           ^^^^^^^^^^^^^^^^^
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument weight in method wrapper_CUDA__cudnn_batch_norm)
